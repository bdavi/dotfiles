#!/usr/bin/env ruby

# frozen_string_literal: true

require 'fileutils'

module Dotfiles
  REPO_FILES_DIRECTORY_PATH = File.expand_path(
    File.join(File.dirname(__FILE__), '../config_files')
  ).freeze

  BACKUP_DIRECTORY_PATH = File.expand_path('~/.dotfiles_backup').freeze

  # Models an individual dotfile for installation
  class Dotfile
    attr_reader :name

    def initialize(name)
      @name = name
    end

    def install
      backup_existing if file_already_exists?
      create_link_to_repo
    end

    def backup_existing
      prepare_backup_directory
      FileUtils.mv(install_path, backup_path)
    end

    def file_already_exists?
      File.exist?(install_path)
    end

    def create_link_to_repo
      FileUtils.ln_s(repo_path, install_path)
    end

    def prepare_backup_directory
      Dir.mkdir(BACKUP_DIRECTORY_PATH) unless Dir.exist?(BACKUP_DIRECTORY_PATH)
    end

    def install_path
      File.join(Dir.home, name)
    end

    def repo_path
      File.join(REPO_FILES_DIRECTORY_PATH, name)
    end

    def backup_path
      File.join(BACKUP_DIRECTORY_PATH, name)
    end
  end

  # Install all the dotfiles in the repo
  class Installer
    def install
      filenames.each { |name| Dotfile.new(name).install }
    end

    def filenames
      Dir.new(REPO_FILES_DIRECTORY_PATH).reject { |name| name =~ /\A\.{1,2}\z/ }
    end
  end
end

def main
  Dotfiles::Installer.new.install
end

if __FILE__ == $0
  main
end
